use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HkdfTestFile {
    /// the primitive tested in the test file
    pub algorithm: Option<String>,
    /// the version of the test vectors.
    pub generator_version: Option<String>,
    /// additional documentation
    pub header: Option<Vec<String>>,
    /// a description of the labels used in the test vectors
    pub notes: Option<HashMap<String, Option<serde_json::Value>>>,
    /// the number of test vectors in this test
    pub number_of_tests: Option<i64>,
    pub schema: Option<Schema>,
    pub test_groups: Option<Vec<HkdfTestGroup>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Schema {
    #[serde(rename = "hkdf_test_schema.json")]
    HkdfTestSchemaJson,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HkdfTestGroup {
    /// the size of the ikm in bits
    pub key_size: Option<i64>,
    pub tests: Option<Vec<HkdfTestVector>>,
    #[serde(rename = "type")]
    pub hkdf_test_group_type: Option<Type>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "HkdfTest")]
    HkdfTest,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HkdfTestVector {
    /// A brief description of the test case
    pub comment: Option<String>,
    /// A list of flags
    pub flags: Option<Vec<String>>,
    /// the key (input key material)
    pub ikm: Option<String>,
    /// additional information used in the key derivation
    pub info: Option<String>,
    /// the generated bytes (output key material)
    pub okm: Option<String>,
    /// Test result
    pub result: Option<Result>,
    /// the salt for the key derivation
    pub salt: Option<String>,
    /// the size of the output in bytes
    pub size: Option<i64>,
    /// Identifier of the test case
    pub tc_id: Option<i64>,
}

/// Test result
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum Result {
    Acceptable,
    Invalid,
    Valid,
}
